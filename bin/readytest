#!/usr/bin/env node

const JS_EXT = '.{js,mjs}';
const GIT_IGNORE = '.gitignore';

const EXIT_CODE_PASS =  0;
const EXIT_CODE_FAIL = -1;

const DEFAULT_TARGETS = [
  'test/**/tests/',
  'spec/**/specs/',
  'test/**{t,T}est' + JS_EXT,
  'spec/**{s,S}pec' + JS_EXT
];

const fs       = require('fs');
const path     = require('path');
const argv     = require('argv');
const glob     = require('glob');
const chalk    = require('chalk');
const chokidar = require('chokidar');

const READY_TEST_PATH = path.resolve(__dirname, '../ready-test');
const ReadyTest = require(READY_TEST_PATH);

let testPaths = null;
let loadQueued = false;

argv.description = 'Usage: readytest [options] [files]';
argv.version(require('../package.json').version);

const args = argv.option([
  {
    short: 'w',
    name: 'watch',
    type: 'boolean',
    description: 'Watches for changes and re-runs tests.',
    example: "'readytest -w' or 'readytest --watch'"
  },
  {
    name: 'watch-dir',
    type: 'list,path',
    description: "Directories to watch when watch mode is enabled. Implies 'watch'.",
    example: "'readytest --watch-dir=foo --watch-dir=bar'"
  },
  {
    short: 'f',
    name: 'fold-mode',
    type: 'string',
    description: argBlock([
      'Sets suite folding.',
      '',
      'all: folds all suites into a single level (default).',
      'top: folds nested suites into top level only.',
      'none: outputs all suites.',
      ''
    ]),
    example: "'readytest --fold-mode=all' or 'readytest -f top'"
  },
  {
    short: 'r',
    name: 'randomize',
    type: 'boolean',
    description: 'Randomizes all tests and suites.',
    example: "'readytest --randomize' or 'readytest -r'"
  },
  {
    short: 's',
    name: 'seed',
    type: 'int',
    description: 'Runs tests in a specific order from a previous randomized run.',
    example: "'readytest --seed=8194' or 'readytest -s 8194'"
  },
  {
    name: 'no-globals',
    type: 'boolean',
    description: "Don't load globals (use require or import instead).",
    example: "'readytest --no-globals'"
  },
  {
    name: 'no-modules',
    type: 'boolean',
    description: 'Disables support for ES6 modules.',
    example: "'readytest --no-modules'"
  }
]).run();

function argBlock(lines) {
  return lines.join('\n' + ' '.repeat(16));
}

function init() {
  withLoadingMessage('ReadyTest', function() {
    initReadyTest();
  });
  if (canWatch()) {
    watchAndRun();
  } else {
    loadAndRun(true);
  }
}

function withLoadingMessage(name, fn) {
  write(systemStyle('Loading ' + name + '.....'));
  fn();
  writeNewLine(systemStyle('done!'));
}

function systemStyle(str) {
  return chalk.gray(str);
}

function write(str) {
  process.stdout.write(str);
}

function writeNewLine(str) {
  write((str || '') + '\n');
}

function initReadyTest() {
  ReadyTest.setStyler(chalk);
  if (!args.options['no-globals']) {
    ReadyTest.exportGlobals();
  }
  if (!args.options['no-modules']) {
    require = require('@std/esm')(module);
  }
  if (args.options['randomize']) {
    ReadyTest.setRandomize(true);
  }
  if (args.options['seed']) {
    ReadyTest.setSeed(+args.options['seed']);
  }
}

function getIgnoredPaths() {
  let paths = [];
  if (fs.existsSync('.gitignore')) {
    fs.readFileSync(GIT_IGNORE, 'utf8').split('\n').forEach(line => {
      if (line) {
        paths.push(path.resolve(line));
      }
    });
  }
  return paths.concat([
    // dotfiles
    /(^|[\/\\])\../,
    path.resolve('node_modules')
  ]);
}

function collectTestPaths() {

  const result = [];
  const explicit = !!args.targets.length;
  const targets = explicit ? args.targets : DEFAULT_TARGETS;

  targets.forEach(target => {
    let pattern = target;
    if (!path.extname(pattern)) {
      pattern += '*' + JS_EXT;
    }
    const paths = glob.sync(pattern);
    if (explicit && !paths.length) {
      throwError('Unmatched pattern: ' + target);
    }
    paths.forEach(p => {
      result.push(path.resolve('.', p));
    });
  });

  if (!result.length) {
    console.error(chalk.red('Nothing to test!'));
    process.exit(EXIT_CODE_FAIL);
  }

  return result;
}

function throwError(msg) {
  process.stdout.write('\n' + chalk.red(new Error(msg).stack));
  process.exit(EXIT_CODE_FAIL);
}

function loadAndRun(exit) {
  ReadyTest.setFoldMode(args.options['fold-mode'] || 'all');
  withLoadingMessage('suites', function() {
    testPaths = testPaths || collectTestPaths();
    testPaths.forEach(clearCache);
    testPaths.forEach(require);
  });
  write(systemStyle('Starting test run...'));
  ReadyTest.run(pass => {
    writeNewLine();
    if (loadQueued) {
      nextRun(exit);
      loadQueued = false;
    } else if (exit) {
      const code = pass ? EXIT_CODE_PASS : EXIT_CODE_FAIL;
      process.exit(code);
    }
  });
}

function nextRun(exit) {
  writeNewLine();
  // The test watcher is not simply re-running loaded tests
  // but actually re-loading them, so need to empty here.
  ReadyTest.empty();
  loadAndRun(exit);
}

function clearCache(id) {
  const module = require.cache[id];
  if (module) {
    module.children.forEach(m => {
      if (m.id !== READY_TEST_PATH) {
        clearCache(m.id);
      }
    });
    delete require.cache[id];
  }
}

function canWatch() {
  return args.options['watch'] || args.options['watch-dir'];
}

function watchAndRun() {
  const dirs = args.options['watch-dir'] || [path.resolve('.')];

  const watcher = chokidar.watch(dirs, {
    persistent: true,
    ignoreInitial: true,
    ignored: getIgnoredPaths()
  });

  watcher.on('all', () => {
    if (ReadyTest.isRunning()) {
      loadQueued = true;
    } else {
      nextRun();
    }
  });
  loadAndRun();
}

init();
